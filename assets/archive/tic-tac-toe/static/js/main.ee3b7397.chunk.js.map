{"version":3,"sources":["css/styles.min.css.map?v=1","components/control.js","components/square.js","components/board.js","components/timer.js","components/calculateWinner.js","components/game.js","components/getBoardStatus.js","index.js","components/description.js"],"names":["module","exports","__webpack_require__","p","Control","props","react_default","a","createElement","className","onClick","label","Square","value","Board","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","i","_this","winner","winningCells","_this$props$winningCe","slicedToArray","b","c","squares","squareCount","rows","j","push","Fragment","renderSquare","createGrid","React","Component","Timer","call","state","date","Date","_this2","timerID","setInterval","tick","setState","toLocaleTimeString","calculateWinner","lines","length","_lines$i","Game","history","Array","fill","stepNumber","xIsNext","slice","concat","step","prevStep","totalMoves","thisStep","status","current","isBoardFull","getBoardStatus","player","moves","map","move","desc","jumpTo","cell","timer_Timer","restart","undo","redo","board_Board","handleClick","ReactDOM","render","document","getElementById","game_Game"],"mappings":"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","file":"static/js/main.ee3b7397.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/styles.min.css.007d04d7.map\";","import React from 'react';\r\n\r\nexport function Control(props) \r\n{\r\n\treturn (\r\n\t\t<button className=\"game-buttons controls\" onClick={props.onClick}>\r\n\t\t\t{props.label}\r\n\t\t</button>\r\n\t);\r\n}","import React from 'react';\r\n\r\nexport function Square(props) \r\n{\r\n\treturn (\r\n\t\t<button className={props.className} onClick={props.onClick}>\r\n\t\t\t{props.value}\r\n\t\t</button>\r\n\t);\r\n}","import React from 'react';\r\n\r\n// visual components\r\nimport {Square} from './square';\r\n\r\nexport class Board extends React.Component \r\n{\r\n   renderSquare(i) \r\n   {\r\n      let winner = \"\";\r\n\r\n      // check if there were winning cells\r\n      if(this.props.winningCells) \r\n      {\r\n         // pull the keys that were winners\r\n         const [a,b,c] = this.props.winningCells;\r\n         // check if this cell is anyone of the winners\r\n         if(a === i || b === i || c === i) winner = \" winner\";\r\n      }\r\n\r\n      return (\r\n         <Square \r\n            className={\"square square\"+i+winner}\r\n            value={this.props.squares[i]} \r\n            onClick={() => this.props.onClick(i)}\r\n         />\r\n      );\r\n   }\r\n\r\n   createGrid() \r\n   {\r\n      // counter for keeping track of what square we're on\r\n      let squareCount = 0;\r\n\r\n      // array for parent (grid rows)\r\n      let rows = [];\r\n\r\n      // loop the rows (3/grid)\r\n      for (let i = 0; i < 3; i++) \r\n      {\r\n         // array for children (grid squares)\r\n         let squares = [];\r\n\r\n         // inner loop for squares (3/row)\r\n         for (let j = 0; j < 3; j++)\r\n         {\r\n            // add square to row; requires parent JSX element, or use a Fragment to avoid adding unnecessary elements to the DOM\r\n            squares.push(<React.Fragment key={squareCount}>{this.renderSquare(squareCount)}</React.Fragment>);\r\n            squareCount++;\r\n         }\r\n\r\n         // push row with child squares to parent array\r\n         rows.push(<div key={i} className=\"board-row\">{squares}</div>)\r\n      }\r\n\r\n      return rows;\r\n   }\r\n\r\n   render() \r\n   {\r\n      return (\r\n         <div>\r\n            {this.createGrid()}\r\n         </div>\r\n      );\r\n   }\r\n}","import React from 'react';\r\n\r\nexport class Timer extends React.Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\tthis.state = { date: new Date()};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.timerID = setInterval(\r\n\t\t\t() => this.tick(),\r\n\t\t\t1000\r\n\t\t);\r\n\t}\r\n\r\n\t// componentWillMount() {\r\n\t// \tclearInterval(this.timerID);\r\n\t// }\r\n\r\n\ttick() {\r\n\t\tthis.setState({\r\n\t\t\tdate: new Date()\r\n\t\t});\r\n\t}\r\n\r\n\trender() \r\n\t{\r\n\t\treturn (\r\n\t\t\t<div>{this.state.date.toLocaleTimeString()}</div>\r\n\t\t);\r\n\t}\t\r\n}","export function calculateWinner(squares) \r\n{\r\n   const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n   ];\r\n\r\n   // sets loop to lines so it can check each\r\n   for (let i = 0; i < lines.length; i++) \r\n   {\r\n      // kind sorta maping variables to the values in the array\r\n      const [a, b, c] = lines[i];\r\n      // checking squares[a] must be needed, perhaps it evaluates to true if not null? Not sure.\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) \r\n      {\r\n         // return the keys of the winning squares\r\n         return [a, b, c];\r\n      }\r\n   }\r\n   return null;\r\n}","import React from 'react';\r\n\r\n// visual components\r\nimport {Control}  from './control';\r\nimport {Board}    from './board';\r\nimport {Timer}    from './timer';\r\n\r\n// logic\r\nimport {calculateWinner} from './calculateWinner';\r\nimport {getBoardStatus} from './getBoardStatus';\r\n\r\nexport class Game extends React.Component \r\n{\r\n   constructor(props) \r\n   {\r\n      super(props);\r\n\r\n      this.state = \r\n      {\r\n         history: [{\r\n            squares: Array(9).fill(null)\r\n         }],\r\n         stepNumber: 0,\r\n         xIsNext: true\r\n      }\r\n   }\r\n\r\n   handleClick(i) \r\n   {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n\r\n      // .slice() makes a new copy of the array\r\n      const squares = current.squares.slice();\r\n\r\n      // if winner or square is not null, do not change square\r\n      if (calculateWinner(squares) || squares[i]) \r\n      {\r\n         return;\r\n      }\r\n\r\n      // add current player's mark to value of square\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n      this.setState({\r\n         // add new slice to history\r\n         history: history.concat([{\r\n            squares: squares,\r\n         }]),\r\n         // update stepNumber\r\n         stepNumber: history.length,\r\n         // toggle player\r\n         xIsNext: !this.state.xIsNext\r\n      });\r\n   }\r\n\r\n   jumpTo(step) \r\n   {\r\n      this.setState({\r\n         stepNumber: step,\r\n         // if we divide the current step by an even number like 2, \r\n         // odd steps will return false and even will return true, \r\n         // aligning with \"player x\" and \"player o\" respectively\r\n         xIsNext: (step % 2) === 0\r\n      });\r\n   }\r\n\r\n   restart() \r\n   {\r\n      // basically match constructor setup\r\n      this.setState({\r\n         history: [{\r\n            squares: Array(9).fill(null)\r\n         }],\r\n         stepNumber: 0,\r\n         xIsNext: true\r\n      });\r\n   }\r\n\r\n   undo() \r\n   {\r\n      // the previous step\r\n      const prevStep = this.state.stepNumber - 1;\r\n\r\n      // check that prevStep isn't before the start of the game\r\n      if(prevStep > -1) \r\n      {\r\n         this.setState({\r\n            stepNumber: prevStep,\r\n            xIsNext: !this.state.xIsNext // reverse toggle so on the same user\r\n         }); \r\n      }\r\n   }  \r\n\r\n   redo() \r\n   {\r\n      // get the history\r\n      const history = this.state.history;\r\n      // how many moves have there been?\r\n      const totalMoves = history.length - 1;\r\n      // current stepNumber\r\n      const thisStep = this.state.stepNumber;\r\n\r\n      // only do if current step isn't the latest move\r\n      if(totalMoves !== thisStep) {\r\n         this.setState({\r\n            stepNumber: thisStep + 1,\r\n            xIsNext: !this.state.xIsNext // reverse toggle so on the same user\r\n         }); \r\n      }\r\n   }\r\n\r\n   render() \r\n   {\r\n      // get the current board\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n\r\n      // check if there's a winner or if the board is full\r\n      const winner = calculateWinner(current.squares);\r\n      const isBoardFull = getBoardStatus(current.squares);\r\n\r\n      // check who's the next player\r\n      const player = this.state.xIsNext ? '1' : '2';\r\n\r\n      // generate the move list\r\n      const moves = history.map((step, move) => \r\n      {\r\n         // figures out the button label (no move = game start)\r\n         const desc = move ?\r\n            'Go to move #' + move :\r\n            'Go to game start';\r\n\r\n         // added to skip \"game start\"\r\n         if (move > 0)\r\n         {\r\n            let current = \"\";\r\n\r\n            // check if move is equal to the current step (presumably is the selected button)\r\n            if (move === this.state.stepNumber) {\r\n               current = \" current\";\r\n            }\r\n\r\n            return (\r\n               <li key={move}>\r\n                  <button className={\"game-buttons move\"+current} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n               </li>\r\n            );\r\n         }\r\n         // not really necessary but removes a warning but returning a value\r\n         else return null;\r\n      });\r\n\r\n      // update status message\r\n      let status;\r\n\r\n      if (winner) {\r\n         // pull a winning key out of the calculateWinner result\r\n         const cell = winner[0];\r\n         // use one winning cell to find the winner's identity\r\n         const winnerName = current.squares[cell] === \"X\" ?\r\n         \"1\" : \"2\";\r\n         // update status\r\n         status = 'Congratulations Player ' + winnerName + '!';\r\n      } \r\n      else if (isBoardFull){\r\n         // the board is full but there's no winner - we have a tie!\r\n         status = 'Darn, no one won. Try again?';\r\n      }\r\n      else {\r\n         // the game is not over yet\r\n         status = 'Your move Player ' + player;\r\n      }\r\n\r\n      return (    \r\n         <div className=\"game\">\r\n\r\n            <div className=\"game-controls game-section\">\r\n               \r\n               <Timer />\r\n\r\n               <Control label=\"New Game\" onClick={() => this.restart()} />\r\n               \r\n               <div className=\"control-divider\"></div>\r\n\r\n               <Control label=\"Undo Move\" onClick={() => this.undo()}/>\r\n               <Control label=\"Redo Move\" onClick={() => this.redo()} />\r\n            </div>\r\n\r\n            <div>\r\n               <div className=\"game-status game-section\">\r\n                  <p className='status'>{status}</p>\r\n               </div>\r\n\r\n               <div className=\"game-board game-section\">\r\n                  <Board \r\n                     winningCells = {winner}\r\n                     squares = {current.squares}\r\n                     onClick={(i) => this.handleClick(i)}\r\n                  />\r\n               </div>\r\n            </div>\r\n\r\n            <div className=\"game-history game-section\">\r\n               <div className=\"section-label\">MOVE HISTORY</div>\r\n               <ul className=\"move-list\">{moves}</ul>\r\n            </div>\r\n\r\n         </div>\r\n      );\r\n   }\r\n}","export function getBoardStatus(squares) \r\n{\r\n\tfor (var i in squares) \r\n\t{\r\n\t\tif(squares[i] == null) \r\n\t\t{ \r\n\t\t\t// once return is called the function will stop\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t// won't go through unless no square in the for returns \"null\"\r\n\treturn true;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// visual components\r\nimport {Description} from './components/description';\r\nimport {Game} from './components/game';\r\n\r\n// styles\r\nimport './css/styles.min.css?v=1';\r\nimport './css/styles.min.css.map?v=1';\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Description />,\r\n  document.getElementById('heading')\r\n);\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('body')\r\n);","import React from 'react';\r\n\r\nexport function Description() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>A battle of epic proportions!</h1>\r\n\t\t\t<h2>More commonly referred to as \"tic-tac-toe\"</h2>\r\n\t\t\t<p className='description'>Who will be the best in all the land? Grab a friend and <b>test your mettle!</b></p>\r\n\t\t</div>\r\n\t);\r\n}"],"sourceRoot":""}